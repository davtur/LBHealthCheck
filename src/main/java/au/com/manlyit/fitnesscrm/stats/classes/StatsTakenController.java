package au.com.manlyit.fitnesscrm.stats.classes;

import au.com.manlyit.fitnesscrm.stats.beans.ConfigMapFacade;
import au.com.manlyit.fitnesscrm.stats.db.StatsTaken;
import au.com.manlyit.fitnesscrm.stats.classes.util.JsfUtil;
import au.com.manlyit.fitnesscrm.stats.classes.util.PaginationHelper;
import au.com.manlyit.fitnesscrm.stats.beans.StatsTakenFacade;
import au.com.manlyit.fitnesscrm.stats.db.CustomerImages;
import au.com.manlyit.fitnesscrm.stats.db.Customers;
import au.com.manlyit.fitnesscrm.stats.db.Stat;
import au.com.manlyit.fitnesscrm.stats.db.StatTypes;

import java.io.Serializable;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.List;
import javax.inject.Inject;
import javax.faces.application.FacesMessage;
import javax.inject.Named;
import javax.enterprise.context.SessionScoped;
import javax.faces.component.UIComponent;
import javax.faces.context.FacesContext;
import javax.faces.convert.Converter;
import javax.faces.convert.FacesConverter;
import javax.faces.event.ActionEvent;
import javax.faces.event.ValueChangeEvent;
import javax.faces.model.DataModel;
import javax.faces.model.ListDataModel;
import javax.faces.model.SelectItem;
import org.primefaces.event.RowEditEvent;
import org.primefaces.event.SelectEvent;

@Named("statsTakenController")
@SessionScoped
public class StatsTakenController implements Serializable {

    private StatsTaken current;
    private StatsTaken selectedForDeletion;
    private Stat currentStat;
    private DataModel items = null;
    @Inject
    private au.com.manlyit.fitnesscrm.stats.beans.CustomerImagesFacade ejbCustomerImages;
    @Inject
    private au.com.manlyit.fitnesscrm.stats.beans.StatsTakenFacade ejbFacade;
    @Inject
    private au.com.manlyit.fitnesscrm.stats.beans.StatsFacade ejbStatFacade;
    @Inject
    private au.com.manlyit.fitnesscrm.stats.beans.StatTypesFacade ejbStatTypesFacade;
    @Inject
    private au.com.manlyit.fitnesscrm.stats.beans.CustomersFacade ejbCustomerFacade;
    @Inject
    private ConfigMapFacade configMapFacade;
    private PaginationHelper pagination;
    private int selectedItemIndex;
    private List<StatsTaken> filteredItems;
    private StatsTaken[] multiSelected;

    public StatsTakenController() {
    }

    public StatsTaken getSelected() {
        if (current == null) {
            current = new StatsTaken();
            current.setDateRecorded(new Date());
            current.setCustomerId(getCustomer());
            current.setTrainerComments(" ");
            current.setImageId(1); //default image
            current.setId(0); // auto generated by DB , but cannot be null

            selectedItemIndex = -1;
        }
        return current;
    }

    public void setSelected(StatsTaken selected) {
        if (selected != null) {
            current = selected;
            selectedItemIndex = -1;
        }

    }

    public static boolean isUserInRole(String roleName) {
        boolean inRole = FacesContext.getCurrentInstance().getExternalContext().isUserInRole(roleName);
        return inRole;

    }

    public Customers getCustomer() {
        Customers cust = null;
        FacesContext context = FacesContext.getCurrentInstance();
        CustomersController custController = (CustomersController) context.getApplication().evaluateExpressionGet(context, "#{customersController}", CustomersController.class);
        String name = custController.getSelected().getUsername();
        cust = ejbCustomerFacade.findCustomerByUsername(name);
        return cust;
    }

    public Stat getSelectedStat() {
        if (currentStat == null) {
            currentStat = new Stat();
            //selectedItemIndex = -1;
        }
        return currentStat;
    }

    private StatsTakenFacade getFacade() {
        return ejbFacade;
    }

    public PaginationHelper getPagination() {
        if (pagination == null) {
            pagination = new PaginationHelper(1000000) {

                @Override
                public int getItemsCount() {
                    return getFacade().count();
                }

                @Override
                public DataModel createPageDataModel() {
                    return new ListDataModel(getFacade().findRange(new int[]{getPageFirstItem(), getPageFirstItem() + getPageSize()}));
                }
            };
        }
        return pagination;
    }

    public String prepareList() {
        recreateModel();
        return "List";
    }

    public String prepareView() {
        //current = (StatsTaken) getItems().getRowData();
        //selectedItemIndex = pagination.getPageFirstItem() + getItems().getRowIndex();
        recreateStatModel();
        updateCustomerImage(current.getImageId());
        return "View";
    }

    public void prepareCreate() {
        current = new StatsTaken();
        current.setDateRecorded(new Date());
        current.setCustomerId(getCustomer());
        current.setTrainerComments(" ");
        current.setImageId(1); //default image
        current.setId(0); // auto generated by DB , but cannot be null
        int count = 0;
        ArrayList<Stat> stats = new ArrayList<>();
        List<StatTypes> statTypesList = ejbStatTypesFacade.findAll();
        for (StatTypes st : statTypesList) {
            count++;
            Stat stat = new Stat();
            stat.setId(count);
            stat.setStatsTakenId(current);
            stat.setStatType(st);
            stats.add(stat);
        }
        current.setStatCollection(stats);
        try {
            getFacade().create(current);
        } catch (Exception e) {
            JsfUtil.addErrorMessage(e, "Persistence Error");
        }
        JsfUtil.addSuccessMessage(configMapFacade.getConfig("StatsTakenCreated"));
        recreateStatModel();
        current.setImageId(prepareCreateCustomerImage().getId());

        selectedItemIndex = -1;
        // set the parent of the list of stats 

        
    }

    public String create() {
        try {
            getFacade().edit(current);
            JsfUtil.addSuccessMessage(configMapFacade.getConfig("StatsTakenUpdated"));
            prepareCreate();
            return "Create";
        } catch (Exception e) {
            JsfUtil.addErrorMessage(e, configMapFacade.getConfig("PersistenceErrorOccured"));
            return null;
        }
    }

    public void createAndReturnToList(ActionEvent event) {
        try {
            getFacade().edit(current);
            JsfUtil.addSuccessMessage(configMapFacade.getConfig("StatsTakenUpdated"));
            recreateModel();
        } catch (Exception e) {
            JsfUtil.addErrorMessage(e, configMapFacade.getConfig("PersistenceErrorOccured"));
        }
    }

    public void recreateStatModel() {
        FacesContext context = FacesContext.getCurrentInstance();
        StatController statController = (StatController) context.getApplication().evaluateExpressionGet(context, "#{statController}", StatController.class);
        statController.setParent(current);
        statController.recreateModel();

    }

    public CustomerImages prepareCreateCustomerImage() {
        CustomerImages ci = new CustomerImages();
        ci.setId(-1);
        ci.setDatetaken(new Date());
        ci.setCustomerId(current.getCustomerId());
        //getFacade().create(current);
        ejbCustomerImages.create(ci);
        FacesContext context = FacesContext.getCurrentInstance();
        CustomerImagesController ciController = (CustomerImagesController) context.getApplication().evaluateExpressionGet(context, "#{customerImagesController}", CustomerImagesController.class);
        ciController.prepareCreateFromStatTakenController(ci);
        return ci;
    }

    public void updateCustomerImage(int id) {
        FacesContext context = FacesContext.getCurrentInstance();
        CustomerImagesController ciController = (CustomerImagesController) context.getApplication().evaluateExpressionGet(context, "#{customerImagesController}", CustomerImagesController.class);
        CustomerImages ci = ejbCustomerImages.find(id);
        if (ci == null) {
            String message = "The Image wasnt found :-( " + id;
            JsfUtil.addErrorMessage(message);
        }
        ciController.setCurrent(ci);

    }

    public void destroyImage() {
        ejbCustomerImages.remove(ejbCustomerImages.find(current.getImageId()));
    }

    public void destroyStats() {
        int id = current.getId();
        List<Stat> stats = ejbStatFacade.findAll(id);
        for (Stat s : stats) {
            ejbStatFacade.remove(s);
        }
        //FacesContext context = FacesContext.getCurrentInstance();
        //StatController statController = (StatController) context.getApplication().evaluateExpressionGet(context, "#{statController}", StatController.class);
        // statController.recreateModel();
    }

    public void createDialogue(ActionEvent actionEvent) {
        try {
           getFacade().edit(current);
            JsfUtil.addSuccessMessage(configMapFacade.getConfig("StatsTakenUpdated"));
            prepareCreate();
            recreateModel();
             JsfUtil.addSuccessMessage(configMapFacade.getConfig("StatsTakenCreated"));
        } catch (Exception e) {
            JsfUtil.addErrorMessage(e, configMapFacade.getConfig("PersistenceErrorOccured"));
        }

    }

    public String prepareEdit() {
        //current = (StatsTaken)getItems().getRowData();
        //selectedItemIndex = pagination.getPageFirstItem() + getItems().getRowIndex();
        recreateStatModel();
        updateCustomerImage(current.getImageId());
        return "Edit";
    }

    public void handleDateSelect(SelectEvent event) {
        Date date = (Date) event.getObject();
        SimpleDateFormat format = new SimpleDateFormat("dd MMM yyyy");

        FacesContext facesContext = FacesContext.getCurrentInstance();
        facesContext.addMessage(null, new FacesMessage(FacesMessage.SEVERITY_INFO, "Date Selected", format.format(date)));
    }

    public void selectOneMenuValueChangeListener(ValueChangeEvent vce) {
        Object o = vce.getNewValue();
    }

    public void selectManyMenuValueChangeListener(ValueChangeEvent vce) {
        Object o = vce.getNewValue();
    }

    public void update(ActionEvent event) {
        try {
            getFacade().edit(current);
            JsfUtil.addSuccessMessage(configMapFacade.getConfig("StatsTakenUpdated"));
           
        } catch (Exception e) {
            JsfUtil.addErrorMessage(e, configMapFacade.getConfig("PersistenceErrorOccured"));
           
        }
    }

    public void destroy(ActionEvent event) {
        performDestroy();
        recreateModel();
        current = null;
    }

    public void discard(ActionEvent event) {
        try {
            destroyStats();
            destroyImage();
            getFacade().remove(current);
            JsfUtil.addSuccessMessage(configMapFacade.getConfig("StatsTakenDiscarded"));
            recreateModel();
        } catch (Exception e) {
            JsfUtil.addErrorMessage(e, configMapFacade.getConfig("PersistenceErrorOccured"));
        }
        recreateModel();
        
    }

    public String destroyAndView() {
        performDestroy();
        recreateModel();
        updateCurrentItem();
        if (selectedItemIndex >= 0) {
            return "View";
        } else {
            // all items were removed - go back to list
            recreateModel();
            return "List";
        }
    }

    public StatsTaken getSelectedForDeletion() {
        return selectedForDeletion;
    }

    public void setSelectedForDeletion(StatsTaken selectedForDeletion) {
        this.selectedForDeletion = selectedForDeletion;
        current = selectedForDeletion;

        performDestroy();
        recreateModel();

    }

    private void performDestroy() {
        try {
            destroyStats();
            getFacade().remove(current);
            JsfUtil.addSuccessMessage(configMapFacade.getConfig("StatsTakenDeleted"));
        } catch (Exception e) {
            JsfUtil.addErrorMessage(e, configMapFacade.getConfig("PersistenceErrorOccured"));
        }
    }

    private void updateCurrentItem() {
        int count = getFacade().count();
        if (selectedItemIndex >= count) {
            // selected index cannot be bigger than number of items:
            selectedItemIndex = count - 1;
            // go to previous page if last page disappeared:
            if (pagination.getPageFirstItem() >= count) {
                pagination.previousPage();
            }
        }
        if (selectedItemIndex >= 0) {
            current = getFacade().findRange(new int[]{selectedItemIndex, selectedItemIndex + 1}).get(0);
        }
    }

    public DataModel getItems() {
        if (items == null) {
            items = getPagination().createPageDataModel();
        }
        return items;
    }

    private void recreateModel() {
        items = null;
        filteredItems = null;
    }

    public String next() {
        getPagination().nextPage();
        recreateModel();
        return "List";
    }

    public String previous() {
        getPagination().previousPage();
        recreateModel();
        return "List";
    }

    public SelectItem[] getItemsAvailableSelectMany() {
        return JsfUtil.getSelectItems(ejbFacade.findAll(), false);
    }

    public SelectItem[] getItemsAvailableSelectOne() {
        return JsfUtil.getSelectItems(ejbFacade.findAll(), true);
    }

    public Collection<StatsTaken> getItemsAvailable() {
        return ejbFacade.findAll();
    }

    public void onEdit(RowEditEvent event) {
        StatsTaken cm = (StatsTaken) event.getObject();
        getFacade().edit(cm);
        recreateModel();
        JsfUtil.addSuccessMessage("Row Edit Successful");
    }

    public void handleUserChange() {
        JsfUtil.addSuccessMessage("User Selected");
    }

    /**
     * @return the filteredItems
     */
    public List<StatsTaken> getFilteredItems() {
        return filteredItems;
    }

    /**
     * @param filteredItems the filteredItems to set
     */
    public void setFilteredItems(List<StatsTaken> filteredItems) {
        this.filteredItems = filteredItems;
    }

    /**
     * @return the multiSelected
     */
    public StatsTaken[] getMultiSelected() {
        return multiSelected;
    }

    /**
     * @param multiSelected the multiSelected to set
     */
    public void setMultiSelected(StatsTaken[] multiSelected) {
        this.multiSelected = multiSelected;
    }

    public void onCancel(RowEditEvent event) {
        JsfUtil.addErrorMessage("Row Edit Cancelled");
    }

    @FacesConverter(forClass = StatsTaken.class)
    public static class StatsTakenControllerConverter implements Converter {

        public Object getAsObject(FacesContext facesContext, UIComponent component, String value) {
            if (value == null || value.length() == 0) {
                return null;
            }
            StatsTakenController controller = (StatsTakenController) facesContext.getApplication().getELResolver().
                    getValue(facesContext.getELContext(), null, "statsTakenController");
            return controller.ejbFacade.find(getKey(value));
        }

        java.lang.Integer getKey(String value) {
            java.lang.Integer key;
            key = Integer.valueOf(value);
            return key;
        }

        String getStringKey(java.lang.Integer value) {
            StringBuilder sb = new StringBuilder();
            sb.append(value);
            return sb.toString();
        }

        @Override
        public String getAsString(FacesContext facesContext, UIComponent component, Object object) {
            if (object == null) {
                return null;
            }
            if (object instanceof StatsTaken) {
                StatsTaken o = (StatsTaken) object;
                return getStringKey(o.getId());
            } else {
                throw new IllegalArgumentException("object " + object + " is of type " + object.getClass().getName() + "; expected type: " + StatsTakenController.class.getName());
            }
        }

    }

}
