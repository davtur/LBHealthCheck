






    <servlet>
        <servlet-name>Push Servlet</servlet-name>
        <servlet-class>org.primefaces.push.PushServlet</servlet-class>
       <init-param>
            <param-name>org.atmosphere.cpr.broadcasterCacheClass</param-name>
            <param-value>org.atmosphere.cache.UUIDBroadcasterCache</param-value>
        </init-param>
        <init-param>
   <param-name>org.atmosphere.cpr.asyncSupport</param-name>
  <param-value>org.atmosphere.container.GlassFishServ30WebSocketSupport</param-value>
</init-param> <!---->
       <!--   Tell Atmosphere to use TrackMessageSizeInterceptor - in order to   
        avoid glued messages -->
        <init-param>
            <param-name>org.atmosphere.cpr.AtmosphereInterceptor</param-name>
            <param-value>org.atmosphere.client.TrackMessageSizeInterceptor</param-value>
        </init-param>
        <!-- that is for long-pollin in order to cache messsages in the session -->  
        
       <init-param>
            <param-name>org.atmosphere.cpr.sessionSupport</param-name>
            <param-value>true</param-value>
        </init-param> 
       
      <!--   This one I have no idea what it does. Someone in the forums   
        suggested it -->
        <!--<init-param>
            <param-name>org.atmosphere.disableOnStateEvent</param-name>
            <param-value>true</param-value>
        </init-param>-->
        
        
        
        <init-param>
            <param-name>org.atmosphere.cpr.asyncSupport</param-name>
            <param-value>org.atmosphere.container.JSR356AsyncSupport</param-value>
        </init-param>
        <init-param>
            <param-name>org.atmosphere.websocket.suppressJSR356</param-name>
            <param-value>true</param-value>
        </init-param>
        <async-supported>true</async-supported>
    </servlet>

    <servlet-mapping>
        <servlet-name>Push Servlet</servlet-name>
        <url-pattern>/primepush/*</url-pattern>
    </servlet-mapping>













Docker notes

docker login --username davtur --password zgpq9ChPJf

docker tag my-image username/my-repo

docker push username/my-repo

or right click image in netbeans and push


Updating components in Primefaces

You probably already know that PrimeFaces is using jQuery under the covers. PrimeFaces Selectors are based on jQuery. Anything which you specify in @(...) will be used as jQuery selector on the current HTML DOM tree. For any found HTML element, which has an ID, exactly this ID will ultimately be used in the update.

Basically, for a update="@(.myclass)", PrimeFaces will under the covers roughly do this:

var $elements = $(".myclass");
var clientIds = [];

$.each($elements, function(index, element) {
    if (element.id) {
        clientIds.push(":" + element.id);
    }
});

var newUpdate = clientIds.join(" "); // This will be used as `update` instead.
So, in case of e.g.

<h:form id="formId">
    <h:outputText id="output1" styleClass="myclass" ... />
    <h:outputText styleClass="myclass" ... />
    <h:outputText id="output3" styleClass="myclass" ... />
</h:form>
this command button update

<p:commandButton ... update="@(.myclass)" />
will end up with exactly the same effect as

<p:commandButton ... update=":formId:output1 :formId:output3" />
Note that this also works for autogenerated IDs. I.e. the <h:form id> is not mandatory.

Sometimes I have a problems with PFS. Is there something what you are should keep in mind if you are using PFS ?
It can happen that you selected "too much" (e.g. @(form) doesn't select current form, but all forms, exactly like $("form") in jQuery!), or that you actually selected nothing (when the desired HTML DOM element has actually no ID). Investigating element IDs in the HTML DOM tree and the request payload in the HTTP traffic monitor the should give clues.

The desired elements in the HTML DOM tree must have an (autogenerated) ID. The javax.faces.partial.render request parameter in the HTTP traffic monitor must contain the right client IDs. The element's rendered attribute in the JSF component tree must evaluate true during update. Etcetera.

In your particular example, the <h:outputText> won't end up in the generated HTML output with any ID. Assigning it an id should solve your problem with updating it.

So, this example won't work

<h:form>
    <h:outputText value="#{bean.text1}" styleClass="myClass" />
    <p:commandButton value="Update" update="@(.myClass)" /> 
</h:form>
but this example will work (note that assigning the form an ID is not necessary):

<h:form>
    <h:outputText id="myText" value="#{bean.text1}" styleClass="myClass" />
    <p:commandButton value="Update" update="@(.myClass)" /> 
</h:form>



Entity Life Cycle Management

https://openjpa.apache.org/builds/1.2.3/apache-openjpa/docs/jpa_overview_em_lifecycle.html


#SQL to check for any customers not assigned to a group

SELECT * FROM fitnessStats.customers where username not IN (SELECT username FROM fitnessStats.groups);

# to fix teh issue
insert into  fitnessStats.groups (SELECT 'USER',0,username FROM fitnessStats.customers where username not IN (SELECT username FROM fitnessStats.groups));


Install local jars with maven install.

i.e for the spark theme use :

 mvn install:install-file -Dfile=/home/david/NetBeansProjects/libraries/Primefaces-purchased-themes/spark-layout-1.3.1/spark-layout-1.3.1.jar -DgroupId=org.primefaces.themes -DartifactId=spark -Dversion=1.3.1 -Dpackaging=jar -DgeneratePom=true


mvn install:install-file -Dfile=/home/david/NetBeansProjects/libraries/Primefaces-purchased-themes/spark-layout-2.1.1/spark-layout-2.1.1.jar -DgroupId=org.primefaces.themes -DartifactId=spark -Dversion=2.1.1 -Dpackaging=jar -DgeneratePom=true

mvn install:install-file -Dfile=/home/david/NetBeansProjects/libraries/Primefaces-purchased-themes/spark-layout-2.1.2/spark-layout-2.1.2.jar -DgroupId=org.primefaces.themes -DartifactId=spark -Dversion=2.1.2 -Dpackaging=jar -DgeneratePom=true


mvn install:install-file -Dfile=/home/david/NetBeansProjects/libraries/Primefaces-purchased-themes/spark-layout-2.1.2/spark-layout-2.1.2.jar -DgroupId=org.primefaces.themes -DartifactId=spark -Dversion=2.1.2 -Dpackaging=jar -DgeneratePom=true

mvn install:install-file -Dfile=/home/david/NetBeansProjects/libraries/Primefaces-purchased-themes/california-1.0.1/california-theme-1.0.1.jar -DgroupId=org.primefaces.themes -DartifactId=spark -Dversion=1.0.1 -Dpackaging=jar -DgeneratePom=true


# install a new build from primefaces elite download 
mvn install:install-file -Dfile=/home/david/NetBeansProjects/libraries/primefaces-5.2.22/primefaces-5.2.22.jar -DgroupId=org.primefaces -DartifactId=primefaces -Dversion=5.2.22 -Dpackaging=jar -DgeneratePom=true

mvn install:install-file -Dfile=/home/david/NetBeansProjects/libraries/primefaces-6.1.9/primefaces-6.1.9.jar -DgroupId=org.primefaces -DartifactId=primefaces -Dversion=6.1.9 -Dpackaging=jar -DgeneratePom=true
mvn install:install-file -Dfile=/home/david/NetBeansProjects/libraries/primefaces-6.1.11/primefaces-6.1.11.jar -DgroupId=org.primefaces -DartifactId=primefaces -Dversion=6.1.11 -Dpackaging=jar -DgeneratePom=true
mvn install:install-file -Dfile=/home/david/NetBeansProjects/libraries/primefaces-6.2.3/primefaces-6.2.3.jar -DgroupId=org.primefaces -DartifactId=primefaces -Dversion=6.2.3 -Dpackaging=jar -DgeneratePom=true
mvn install:install-file -Dfile=/home/david/NetBeansProjects/libraries/primefaces-6.2.4/primefaces-6.2.4.jar -DgroupId=org.primefaces -DartifactId=primefaces -Dversion=6.2.4 -Dpackaging=jar -DgeneratePom=true


mvn install:install-file
-Dfile=<path-to-file>
-DgroupId=<group-id>
-DartifactId=<artifact-id>
-Dversion=<version>
-Dpackaging=<packaging>
-DgeneratePom=true

Where: <path-to-file>  the path to the file to load
   <group-id>      the group that the file should be registered under
   <artifact-id>   the artifact name for the file
   <version>       the version of the file
   <packaging>     the packaging of the file e.g. jar


dont use this as it may break in future versions of maven

<dependency>
            <groupId>org.primefaces.themes</groupId>
            <artifactId>spark</artifactId>
            <version>1.3.1</version>
            <scope>system</scope>
            <systemPath>${project.basedir}/src/main/resources/spark-theme-1.3.1.jar</systemPath>
            <type>jar</type>
        </dependency>




#GLASSFISH HTTP settings on the Protocal-->Listeners.

We will be making large post such as photos up to 10MB so set max post size to 16777216 or -1 for unlimited

increase buffers to 65535

increase max save post size to 8192

How to clean up survey answers when there are multiple subitems
#DELETE FROM fitnessStats.survey_answer_subitems where answer_id IN(SELECT id FROM fitnessStats.survey_answers where user_id = 3);
#DELETE FROM fitnessStats.survey_answers where user_id = 3;

mysqldiff   --server1=root:Surf2day@vms --server2=root:Surf2day@localhost  --changes-for=server1 --show-reverse  fitnessStats:fitnessStats --force --difftype=sql --skip-table-options



This is teh diff command to execute on homeserver to show changes to make to vms ( prod )

mysqldiff   --server2=root:Surf2day@vms --server1=root:Surf2day@localhost  --changes-for=server2   fitnessStats:fitnessStats --force --difftype=sql --skip-table-options

Logging on Netbeans console.

edit domain/config/logging.properties

#java.util.logging.ConsoleHandler.formatter=com.sun.enterprise.server.logging.UniformLogFormatter
java.util.logging.ConsoleHandler.formatter=java.util.logging.SimpleFormatter
java.util.logging.SimpleFormatter.format=%1$tY-%1$tm-%1$td %1$tH:%1$tM:%1$tS.%1$tL %4$-7s (%2$s) %5$s %6$s%n
c

----------------------------------------------------------------------------------
Log4j 

Assuming you have downloaded both GlassFish and Log4j, begin by copying the log4j-api-2.0.jar and log4j-core-2.0.jar JARs to your GlassFishâ€™s lib directory: $GF_Home/glassfish/lib

Next we need to provide GlassFish with a config file for it to get the logging configuration from. We will take advantage of Log4j automatic configuration, and place the configuration file on the GlassFish domainâ€™s classpath. To this end, create a file called log4j2.xml and place it in the domainâ€™s classpath: $GF_Home/glassfish/domains/domain1/lib/classes

As a quick note, I am not just calling the config file log4j2.xml for clarityâ€™s sake; it must be named this for automatic configuration to work. If Log4j cannot find an XML or JSON file with the name log4j2 on the classpath, it will fall back to a default configuration where log messages of level error are output to the console.

Inside the config file we just created, copy and paste the below to provide a simple test logging configuration:

 

 <?xml version="1.0" encoding="UTF-8"?>   <Configuration status="WARN">      <Appenders>         <Console name="Console" target="SYSTEM_OUT">            <PatternLayout pattern="%d{HH:mm} [%t] %-5level %logger{36} - %msg%n"/>         </Console>      </Appenders>      <Loggers>         <Root level="trace">            <AppenderRef ref="Console"/>         </Root>      </Loggers>   </Configuration> 
This will print out log messages of any level called from the application to the server.log log file of the domain or instance that the application is running on, only printing the hour and minute that the message was logged at (probably bad practice, but it helps to prove that it's working).

And thatâ€™s it! This configuration will apply itself to all instances created under this domain, allowing you to use Log4j with all of your applications.