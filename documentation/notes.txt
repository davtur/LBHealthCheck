


### accessing managed beans in a servlet ###

In a Servlet, you can get request scoped beans by:

Bean bean = (Bean) request.getAttribute("beanName");
and session scoped beans by:


Bean bean = (Bean) request.getSession().getAttribute("beanName");
and application scoped beans by:

Bean bean = (Bean) getServletContext().getAttribute("beanName");
If you're running in a dependency injection capable framework/container and the bean is managed by CDI's @Named instead of JSF's @ManagedBean, it's even more easy:

@Inject
private Bean bean;
Regardless of the scope, when you're actually inside the FacesContext (i.e. the current HTTP request has been served through the FacesServlet), then the normal JSF2 way is using Application#evaluateExpressionGet():

FacesContext context = FacesContext.getCurrentInstance();
Bean bean = context.getApplication().evaluateExpressionGet(context, "#{beanName}", Bean.class);
which can be convenienced as follows:

@SuppressWarnings("unchecked")
public static <T> T findBean(String beanName) {
    FacesContext context = FacesContext.getCurrentInstance();
    return (T) context.getApplication().evaluateExpressionGet(context, "#{" + beanName + "}", Object.class);
}
and can be used as follows:

Bean bean = findBean("bean");
However, when you're already inside a @ManagedBean, then using @ManagedProperty is cleaner since it's more declarative.

@ManagedProperty("#{bean}")
private Bean bean;




# how to run open project

docker run  -p 8082:80  -v /persistent/db-data/dir/on/host:/var/lib/postgresql/9.4/main  -v /persistent/openproject/data/on/host:/var/db/openproject  -e SECRET_KEY_BASE=BigBadBorns1979! openproject/community:7

http://localhost:8082


## wildfly SSL parameters fro ubuntu 18.04
-Dorg.wildfly.openssl.path.ssl=/usr/lib/x86_64-linux-gnu/libssl.so.1.1 -Dorg.wildfly.openssl.path.crypto=/usr/lib/x86_64-linux-gnu/libcrypto.so.1.1


## test websocket connection

david@david-h8-1210a:~$ curl -i -N -H "Connection: Upgrade" -H "Upgrade: websocket" -H "Host: test-services.manlybeachfemalefitness.com.au" -H "Origin: https://https://test-services.manlybeachfemalefitness.com.au" https://test-services.manlybeachfemalefitness.com.au/FitnessStats/

curl -i -N -H "Connection: Upgrade" -H "Upgrade: websocket" -H "Host: services.manlybeachfemalefitness.com.au" -H "Origin: https://https://services.manlybeachfemalefitness.com.au" https://services.manlybeachfemalefitness.com.au/FitnessStats/


##Import Apache SSl certs into keystore for use with wildfly or glassfish
openssl pkcs12 -export -in "/home/david/certs/mbff-local.crt" -inkey "/home/david/certs/mbff-local.key"  -out "/home/david/certs/mbff-local.p12" -name mbfflocal -CAfile "/home/david/old-documents-sep-2016/websites/pure Fitness/certificates/home_manlyit_com_au/home_manlyit_com_au_cacert.crt" -caname root -chain

## Wildfy deployments

ubuntu@ip-172-31-29-66:/opt/wildfly/wildfly-12.0.0.Final/bin$ ./jboss-cli.sh 
You are disconnected at the moment. Type 'connect' to connect to the server or 'help' for the list of supported commands.
[disconnected /] connect
Authenticating against security realm: ManagementRealm
Username: admin
Password: 
[standalone@localhost:9990 /] 
[standalone@localhost:9990 /] undeploy Fitness*
[standalone@localhost:9990 /] deploy /home/ubuntu/FitnessCRM-7.5.1.war --force



 // have to keep entity collections in sync



ejbSessionBookingsFacade.create(sb);
sh.getSessionBookingsCollection().add(sb);
sessionHistoryFacade.edit(sh);


#### First, when you have a bidirectional relationship, JPA requires that you keep both sides of the relationship in synch with each other. This allows caching entities and other performance enhancements to be enabled by many providers. In this case, when you set the USER_ID field, you should update the User's addressCollection that is affected by the change so that your object model stays in synch with what you are committing to the database.
####
#### An alternative is to force a refresh manually on the User instance. This can be done with a em.refresh(user) call, or through provider specific options and query hints. This is usually the least performant option though as it requires a database hit that isn't needed.




--------------------------------------

## loading resources
## the file must be in src/main/resources/  i.e. if I wanted to load a file called src/main.resources/images/foo.jpg i would pass /images/foo.jpg to getResourceAsStream("/images/foo.jpg")
                                
##                                InputStream resourceContent = this.getClass().getResourceAsStream(placeholderImage);


## solving javax.el.PropertyNotFoundException: Target Unreachable, 'null' returned null

https://stackoverflow.com/questions/30128395/identifying-and-solving-javax-el-propertynotfoundexception-target-unreachable



## Install SSL Cert in Wildfly ##


locate the application keystore for wildfly

/home/david/wildfly/wildfly-12.0.0.Final/standalone/configuration/application.keystore



Importing the Certificate
Now that you have your Certificate you can import it into you local keystore. First of all you have to import a so called Chain Certificate or Root Certificate into your keystore. After that you can proceed with importing your Certificate.

Download a Chain Certificate from the Certificate Authority you obtained the Certificate from.
Import the Chain Certificate into your keystore

#for java convert the apache certs and ca cert to pkcs12 format new keystore
# for my new cert ( export password Surf2day )

openssl pkcs12 -export -in "/home/david/old-documents-sep-2016/websites/pure Fitness/certificates/home_manlyit_com_au/home_manlyit_com_au.crt" -inkey "/home/david/old-documents-sep-2016/websites/pure Fitness/certificates/home-manlyit.key"  -out "/home/david/old-documents-sep-2016/websites/pure Fitness/certificates/home-manlyit.p12" -name homemanlyit -CAfile "/home/david/old-documents-sep-2016/websites/pure Fitness/certificates/home_manlyit_com_au/home_manlyit_com_au_cacert.crt" -caname root -chain
Enter Export Password:
Verifying - Enter Export Password:

# set wildfly to use your new keystore with the apache certs in it

            <security-realm name="ApplicationRealm">
                <server-identities>
                    <ssl>
                     <!--   <keystore path="application.keystore" relative-to="jboss.server.config.dir" keystore-password="password" alias="server" key-password="password" generate-self-signed-certificate-host="localhost"/>-->
                        <keystore path="home-manlyit.p12" relative-to="jboss.server.config.dir" keystore-password="Surf2day" alias="homemanlyit" key-password="Surf2day" />

                    </ssl>
                </server-identities>



keytool -import -alias root -keystore <your_keystore_filename> 	-trustcacerts -file <filename_of_the_chain_certificate>

And finally import your new Certificate

keytool -import -alias tomcat -keystore <your_keystore_filename> -file <your_certificate_filename>

# for local linux box ( keystore password is password and key pass was Surf2day )
keytool -import -alias homemanlyitroot -keystore "/home/david/wildfly/wildfly-12.0.0.Final/standalone/configuration/application.keystore" -trustcacerts -file "/home/david/old-documents-sep-2016/websites/pure Fitness/certificates/home_manlyit_com_au/home_manlyit_com_au.ca-bundle"
keytool -import -alias homemanlyit     -keystore "/home/david/wildfly/wildfly-12.0.0.Final/standalone/configuration/application.keystore"               -file "/home/david/old-documents-sep-2016/websites/pure Fitness/certificates/home_manlyit_com_au/home_manlyit_com_au.crt"




## Migrate Mysql database to open shift ##


mysqldump --skip-lock-tables  -P 3306 -u root --password=Surf2day --all-databases > ~/mysqldump/all.sql



# select browse catalog and mysql. 
# connection username purefit
# connection password Varmint11!!
# root password Surf2day
# database name fitnessStats


# find the mysql pod 
oc get pods

# copy the mysql dump to the container


oc rsync ~/mysqldump mysql-1-mdb9q:/var/lib/mysql/data


# rshell into teh container 

 oc rsh mysql-1-mdb9q

# cd to dump directory

cd /var/lib/mysql/data/mysqldump

# connect to mysql

 oc rsh mysql-1-mdb9q

# restore DB

source all.sql

# grant priviledges
mysql> Grant all privileges on fitnessStats to root@localhost;
mysql> create user purefit@localhost;
mysql> Grant all privileges on fitnessStats to purefit@localhost;

mysql> GRANT ALL PRIVILEGES ON fitnessStats.* TO 'purefit'@'%';
mysql> FLUSH PRIVILEGES;

# remove teh dump directory


# add environmnet variables
# config is in the root directory fo the project under /configuration/standalone.xml

From left menu: Applications->Deployments->(dbtest)Wildfly10 pod->environment(tab)-> add: 
MYSQL_DATABASE=fitnesStats 
MYSQL_DB_ENABLED=true 
MYSQL_USER:purefit 
MYSQL_PASSWORD:Varmints11!!



##datasources must be configured on the /configuration/standalone.xml file as it is copied to the container by source to image.







## OPENSHIFT
## to install for openshift in remote nexus
## make sure the username and password are in ~/.m2/settings.xml under servers. The id should be nexus 

mvn deploy:deploy-file -Dfile=/home/david/NetBeansProjects/libraries/primefaces-6.2.18/primefaces-6.2.18.jar -DgroupId=org.primefaces -DartifactId=primefaces -Dversion=6.2.18 -Dpackaging=jar -DgeneratePom=true -DrepositoryId=nexus -Durl=https://nexus-ci.shift.manlyit.com.au/nexus/content/repositories/releases

mvn deploy:deploy-file -Dfile=/home/david/NetBeansProjects/libraries/Primefaces-purchased-themes/california-1.0.1/california-theme-1.0.1.jar -DgroupId=org.primefaces.themes -DartifactId=california-theme -Dversion=1.0.1 -Dpackaging=jar -DgeneratePom=true -DrepositoryId=nexus -Durl=https://nexus-ci.shift.manlyit.com.au/nexus/content/repositories/releases


## END OPENSHIFT




## Install local artifact in project for openshift container use ##

/home/david/NetBeansProjects/FitnessCRM/repo


The proper way to do it would be to use an EAR project, but you can create a project repository as well, which is what you're asking.

1: Make a directory in the root of your project named repo.

2: Install your jar(s) there using maven install-file with the -DlocalRepositoryPath=path-to-specific-local-repo set to your repo directory. E.g:

mvn install:install-file -Dfile=path-to-your-artifact-jar 
    -DgroupId=your.groupId 
    -DartifactId=your-artifactId 
    -Dversion=version 
    -Dpackaging=jar
    -DlocalRepositoryPath=path-to-specific-local-repo


mvn install:install-file -Dfile=/home/david/NetBeansProjects/libraries/primefaces-6.2.4/primefaces-6.2.4.jar -DgroupId=org.primefaces -DartifactId=primefaces -Dversion=6.2.4 -Dpackaging=jar -DgeneratePom=true -DlocalRepositoryPath=/home/david/NetBeansProjects/FitnessCRM/repo

mvn install:install-file -Dfile=/home/david/NetBeansProjects/libraries/Primefaces-purchased-themes/california-1.0.1/california-theme-1.0.1.jar -DgroupId=org.primefaces.themes -DartifactId=california-theme -Dversion=1.0.1 -Dpackaging=jar -DgeneratePom=true -DlocalRepositoryPath=/home/david/NetBeansProjects/FitnessCRM/repo

mvn install:install-file -Dfile=/home/david/NetBeansProjects/libraries/primefaces-6.2.18/primefaces-6.2.18.jar -DgroupId=org.primefaces -DartifactId=primefaces -Dversion=6.2.18 -Dpackaging=jar -DgeneratePom=true -DlocalRepositoryPath=/home/david/NetBeansProjects/FitnessCRM/repo

3: Modify your pom file to use this local repo:

<repositories>
    <repository>
        <id>project.local</id>
        <name>project</name>
        <url>file:${project.basedir}/repo</url>
    </repository>
</repositories>
4: Make sure it builds locally. You may want to clean out your project jars from your local .m2 repository and then build your project with mvn clean verify to insure the .war file gets built properly. After that it should deploy fine to OpenShift or Heroku.


############################################################################

    <servlet>
        <servlet-name>Push Servlet</servlet-name>
        <servlet-class>org.primefaces.push.PushServlet</servlet-class>
       <init-param>
            <param-name>org.atmosphere.cpr.broadcasterCacheClass</param-name>
            <param-value>org.atmosphere.cache.UUIDBroadcasterCache</param-value>
        </init-param>
        <init-param>
   <param-name>org.atmosphere.cpr.asyncSupport</param-name>
  <param-value>org.atmosphere.container.GlassFishServ30WebSocketSupport</param-value>
</init-param> <!---->
       <!--   Tell Atmosphere to use TrackMessageSizeInterceptor - in order to   
        avoid glued messages -->
        <init-param>
            <param-name>org.atmosphere.cpr.AtmosphereInterceptor</param-name>
            <param-value>org.atmosphere.client.TrackMessageSizeInterceptor</param-value>
        </init-param>
        <!-- that is for long-pollin in order to cache messsages in the session -->  
        
       <init-param>
            <param-name>org.atmosphere.cpr.sessionSupport</param-name>
            <param-value>true</param-value>
        </init-param> 
       
      <!--   This one I have no idea what it does. Someone in the forums   
        suggested it -->
        <!--<init-param>
            <param-name>org.atmosphere.disableOnStateEvent</param-name>
            <param-value>true</param-value>
        </init-param>-->
        
        
        
        <init-param>
            <param-name>org.atmosphere.cpr.asyncSupport</param-name>
            <param-value>org.atmosphere.container.JSR356AsyncSupport</param-value>
        </init-param>
        <init-param>
            <param-name>org.atmosphere.websocket.suppressJSR356</param-name>
            <param-value>true</param-value>
        </init-param>
        <async-supported>true</async-supported>
    </servlet>

    <servlet-mapping>
        <servlet-name>Push Servlet</servlet-name>
        <url-pattern>/primepush/*</url-pattern>
    </servlet-mapping>













Docker notes

docker login --username davtur --password zgpq9ChPJf

docker tag my-image username/my-repo

docker push username/my-repo

or right click image in netbeans and push


Updating components in Primefaces

You probably already know that PrimeFaces is using jQuery under the covers. PrimeFaces Selectors are based on jQuery. Anything which you specify in @(...) will be used as jQuery selector on the current HTML DOM tree. For any found HTML element, which has an ID, exactly this ID will ultimately be used in the update.

Basically, for a update="@(.myclass)", PrimeFaces will under the covers roughly do this:

var $elements = $(".myclass");
var clientIds = [];

$.each($elements, function(index, element) {
    if (element.id) {
        clientIds.push(":" + element.id);
    }
});

var newUpdate = clientIds.join(" "); // This will be used as `update` instead.
So, in case of e.g.

<h:form id="formId">
    <h:outputText id="output1" styleClass="myclass" ... />
    <h:outputText styleClass="myclass" ... />
    <h:outputText id="output3" styleClass="myclass" ... />
</h:form>
this command button update

<p:commandButton ... update="@(.myclass)" />
will end up with exactly the same effect as

<p:commandButton ... update=":formId:output1 :formId:output3" />
Note that this also works for autogenerated IDs. I.e. the <h:form id> is not mandatory.

Sometimes I have a problems with PFS. Is there something what you are should keep in mind if you are using PFS ?
It can happen that you selected "too much" (e.g. @(form) doesn't select current form, but all forms, exactly like $("form") in jQuery!), or that you actually selected nothing (when the desired HTML DOM element has actually no ID). Investigating element IDs in the HTML DOM tree and the request payload in the HTTP traffic monitor the should give clues.

The desired elements in the HTML DOM tree must have an (autogenerated) ID. The javax.faces.partial.render request parameter in the HTTP traffic monitor must contain the right client IDs. The element's rendered attribute in the JSF component tree must evaluate true during update. Etcetera.

In your particular example, the <h:outputText> won't end up in the generated HTML output with any ID. Assigning it an id should solve your problem with updating it.

So, this example won't work

<h:form>
    <h:outputText value="#{bean.text1}" styleClass="myClass" />
    <p:commandButton value="Update" update="@(.myClass)" /> 
</h:form>
but this example will work (note that assigning the form an ID is not necessary):

<h:form>
    <h:outputText id="myText" value="#{bean.text1}" styleClass="myClass" />
    <p:commandButton value="Update" update="@(.myClass)" /> 
</h:form>



Entity Life Cycle Management

https://openjpa.apache.org/builds/1.2.3/apache-openjpa/docs/jpa_overview_em_lifecycle.html


#SQL to check for any customers not assigned to a group

SELECT * FROM fitnessStats.customers where username not IN (SELECT username FROM fitnessStats.groups);

# to fix teh issue
insert into  fitnessStats.groups (SELECT 'USER',0,username FROM fitnessStats.customers where username not IN (SELECT username FROM fitnessStats.groups));


Install local jars with maven install.

i.e for the spark theme use :

 mvn install:install-file -Dfile=/home/david/NetBeansProjects/libraries/Primefaces-purchased-themes/spark-layout-1.3.1/spark-layout-1.3.1.jar -DgroupId=org.primefaces.themes -DartifactId=spark -Dversion=1.3.1 -Dpackaging=jar -DgeneratePom=true


mvn install:install-file -Dfile=/home/david/NetBeansProjects/libraries/Primefaces-purchased-themes/spark-layout-2.1.1/spark-layout-2.1.1.jar -DgroupId=org.primefaces.themes -DartifactId=spark -Dversion=2.1.1 -Dpackaging=jar -DgeneratePom=true

mvn install:install-file -Dfile=/home/david/NetBeansProjects/libraries/Primefaces-purchased-themes/spark-layout-2.1.2/spark-layout-2.1.2.jar -DgroupId=org.primefaces.themes -DartifactId=spark -Dversion=2.1.2 -Dpackaging=jar -DgeneratePom=true


mvn install:install-file -Dfile=/home/david/NetBeansProjects/libraries/Primefaces-purchased-themes/spark-layout-2.1.2/spark-layout-2.1.2.jar -DgroupId=org.primefaces.themes -DartifactId=spark -Dversion=2.1.2 -Dpackaging=jar -DgeneratePom=true

mvn install:install-file -Dfile=/home/david/NetBeansProjects/libraries/Primefaces-purchased-themes/california-1.0.1/california-theme-1.0.1.jar -DgroupId=org.primefaces.themes -DartifactId=california -Dversion=1.0.1 -Dpackaging=jar -DgeneratePom=true


# install a new build from primefaces elite download 
mvn install:install-file -Dfile=/home/david/NetBeansProjects/libraries/primefaces-5.2.22/primefaces-5.2.22.jar -DgroupId=org.primefaces -DartifactId=primefaces -Dversion=5.2.22 -Dpackaging=jar -DgeneratePom=true

mvn install:install-file -Dfile=/home/david/NetBeansProjects/libraries/primefaces-6.1.9/primefaces-6.1.9.jar -DgroupId=org.primefaces -DartifactId=primefaces -Dversion=6.1.9 -Dpackaging=jar -DgeneratePom=true
mvn install:install-file -Dfile=/home/david/NetBeansProjects/libraries/primefaces-6.1.11/primefaces-6.1.11.jar -DgroupId=org.primefaces -DartifactId=primefaces -Dversion=6.1.11 -Dpackaging=jar -DgeneratePom=true
mvn install:install-file -Dfile=/home/david/NetBeansProjects/libraries/primefaces-6.2.3/primefaces-6.2.3.jar -DgroupId=org.primefaces -DartifactId=primefaces -Dversion=6.2.3 -Dpackaging=jar -DgeneratePom=true
mvn install:install-file -Dfile=/home/david/NetBeansProjects/libraries/primefaces-6.2.4/primefaces-6.2.4.jar -DgroupId=org.primefaces -DartifactId=primefaces -Dversion=6.2.4 -Dpackaging=jar -DgeneratePom=true


mvn install:install-file
-Dfile=<path-to-file>
-DgroupId=<group-id>
-DartifactId=<artifact-id>
-Dversion=<version>
-Dpackaging=<packaging>
-DgeneratePom=true

Where: <path-to-file>  the path to the file to load
   <group-id>      the group that the file should be registered under
   <artifact-id>   the artifact name for the file
   <version>       the version of the file
   <packaging>     the packaging of the file e.g. jar


dont use this as it may break in future versions of maven

<dependency>
            <groupId>org.primefaces.themes</groupId>
            <artifactId>spark</artifactId>
            <version>1.3.1</version>
            <scope>system</scope>
            <systemPath>${project.basedir}/src/main/resources/spark-theme-1.3.1.jar</systemPath>
            <type>jar</type>
        </dependency>




#GLASSFISH HTTP settings on the Protocal-->Listeners.

We will be making large post such as photos up to 10MB so set max post size to 16777216 or -1 for unlimited

increase buffers to 65535

increase max save post size to 8192

How to clean up survey answers when there are multiple subitems
#DELETE FROM fitnessStats.survey_answer_subitems where answer_id IN(SELECT id FROM fitnessStats.survey_answers where user_id = 3);
#DELETE FROM fitnessStats.survey_answers where user_id = 3;

mysqldiff   --server1=root:Surf2day@vms --server2=root:Surf2day@localhost  --changes-for=server1 --show-reverse  fitnessStats:fitnessStats --force --difftype=sql --skip-table-options



This is teh diff command to execute on homeserver to show changes to make to vms ( prod )

mysqldiff   --server2=root:Surf2day@vms --server1=root:Surf2day@localhost  --changes-for=server2   fitnessStats:fitnessStats --force --difftype=sql --skip-table-options

Logging on Netbeans console.

edit domain/config/logging.properties

#java.util.logging.ConsoleHandler.formatter=com.sun.enterprise.server.logging.UniformLogFormatter
java.util.logging.ConsoleHandler.formatter=java.util.logging.SimpleFormatter
java.util.logging.SimpleFormatter.format=%1$tY-%1$tm-%1$td %1$tH:%1$tM:%1$tS.%1$tL %4$-7s (%2$s) %5$s %6$s%n
c

----------------------------------------------------------------------------------
Log4j 

Assuming you have downloaded both GlassFish and Log4j, begin by copying the log4j-api-2.0.jar and log4j-core-2.0.jar JARs to your GlassFish’s lib directory: $GF_Home/glassfish/lib

Next we need to provide GlassFish with a config file for it to get the logging configuration from. We will take advantage of Log4j automatic configuration, and place the configuration file on the GlassFish domain’s classpath. To this end, create a file called log4j2.xml and place it in the domain’s classpath: $GF_Home/glassfish/domains/domain1/lib/classes

As a quick note, I am not just calling the config file log4j2.xml for clarity’s sake; it must be named this for automatic configuration to work. If Log4j cannot find an XML or JSON file with the name log4j2 on the classpath, it will fall back to a default configuration where log messages of level error are output to the console.

Inside the config file we just created, copy and paste the below to provide a simple test logging configuration:

 

 <?xml version="1.0" encoding="UTF-8"?>   <Configuration status="WARN">      <Appenders>         <Console name="Console" target="SYSTEM_OUT">            <PatternLayout pattern="%d{HH:mm} [%t] %-5level %logger{36} - %msg%n"/>         </Console>      </Appenders>      <Loggers>         <Root level="trace">            <AppenderRef ref="Console"/>         </Root>      </Loggers>   </Configuration> 
This will print out log messages of any level called from the application to the server.log log file of the domain or instance that the application is running on, only printing the hour and minute that the message was logged at (probably bad practice, but it helps to prove that it's working).

And that’s it! This configuration will apply itself to all instances created under this domain, allowing you to use Log4j with all of your applications.
